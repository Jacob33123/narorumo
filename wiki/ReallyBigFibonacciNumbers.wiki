#summary It turns out you can compute them pretty quickly!
#labels Featured,Fibonacci,SICP,bignum,algorithms,Scheme

=Really big Fibonacci numbers=
(an article by [Lindsey])

_SICP_ [http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.19 Exercise 1.19] gives most of a procedure for computing [http://en.wikipedia.org/wiki/Fibonacci_number Fibonacci numbers] that runs in a logarithmic number of steps.  The exercise is to complete the procedure by replacing the `<??>`s in the code below with the appropriate expressions.

{{{
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   <??>      ; compute p'
                   <??>      ; compute q'
                   (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))
}}}

After I [http://code.google.com/p/narorumo/source/diff?r=81&format=side&path=/trunk/sicp/chapter1.scm did the exercise], it seemed to be working pretty snappily on the smaller numbers I tested it with, so I tried `(fib 1000000)`.  The resulting number, which takes about 0.945 seconds to calculate^1^  on my 2.4 GHz !MacBook Pro, turns out to have 208,988 digits in base 10.

To make sure I had it right, I googled [http://www.google.com/search?q=%22millionth+fibonacci+number%22 "millionth fibonacci number"].^2^  [http://www.upl.cs.wisc.edu/~bethenco/fibo/ This person's result]^3^ turned out to be the same as mine, according to `diff`.

Next I tried [http://www.google.com/search?q=%22ten+millionth+fibonacci+number%22 "ten millionth fibonacci number"]^4^ and found [http://www.bigzaphod.org/fibonacci/ this person's work].^5^  The author wrote, "This sucker took around 31 hours of computation on a 1.67Ghz G4 !PowerBook."  On my machine, it takes about 26 seconds.^6^  The resulting number has 2,089,877 digits in base 10, and again, `diff` says we have the same answer.

How about the hundred millionth Fibonacci number?  Well, `(fib 100000000)` is running now, and I'll let you know if it ever decides to stop.

Should you want to try it at home, I took the code, some test cases, and an explanation of how I found _p'_ and _q'_ and pulled them out into a separate file.  It's about 20 lines of Scheme, plus a lot of comments:
  * [http://code.google.com/p/narorumo/source/browse/trunk/sicp/1.19.scm 1.19.scm]  

You can also download the output of the program as a text file:
  * [http://code.google.com/p/narorumo/downloads/detail?name=millionth-fibonacci-number.txt millionth-fibonacci-number.txt]
  * [http://code.google.com/p/narorumo/downloads/detail?name=ten-millionth-fibonacci-number.txt ten-millionth-fibonacci-number.txt]

== Acknowledgments ==

It took about two hours to do this exercise.  [http://code.google.com/u/alex.rudnick/ Alex] patiently let me [http://c2.com/cgi/wiki?RubberDucking rubber-duck] through the first part of the problem, then suggested that I start using "_p'_" and "_q'_" so that I'd be able to tell "old" and "new" _p_ and _q_ apart in my equations, which saved me from scope-related insanity.  He also helped me realize that I had a system of equations that I could use to solve for _p'_ and _q'_.  Once I was done with the math, it took only a couple of minutes to write the code.

[http://xkcd.com/289/ http://imgs.xkcd.com/comics/alone.png]

== Notes ==

^1^ I got the 0.945 seconds figure by running [http://code.google.com/p/narorumo/source/browse/trunk/sicp/1.19.scm 1.19.scm] with all the test cases but `(display (fib 1000000))` commented out, using the command `time mzscheme -r 1.19.scm > millionth-fibonacci-number.txt`.  I tried it a few times, and 0.945 seconds seemed close to average. 

^2^ At the time of this writing on May 12, 2008, this query returned 26 results.

^3^ It was also [http://digg.com/odd_stuff/The_millionth_fibonacci_number/ mentioned on Digg] with the comment "This must have taken a while to calculate."

^4^ This one returned 13 results.  I thought they might keep decreasing by half, but neither [http://www.google.com/search?q=%22hundred+millionth+fibonacci+number%22 "hundred millionth fibonacci number"] nor [http://www.google.com/search?q=%22100%2C000%2C000th+fibonacci+number%22 "100,000,000th fibonacci number"] returned anything.  (How long until _this_ page gets indexed?)

^5^ This one [http://digg.com/programming/Ten_Millionth_Fibonacci_Number made Digg] as well.  Apparently, `(fib 1000000)` counts as "odd stuff" while `(fib 10000000)` counts as "programming".

^6^ 26.720 seconds on my machine, running [http://code.google.com/p/narorumo/source/browse/trunk/sicp/1.19.scm 1.19.scm] with all the test cases but `(display (fib 10000000))` commented out, using the command `time mzscheme -r 1.19.scm > ten-millionth-fibonacci-number.txt`.  Can it be even faster?  According to [http://books.google.com/books?id=yJIghWULQV8C&pg=PA155&lpg=PA155&dq=%2210,000,000th+fibonacci+number%22&ots=GIMiKnKkc7&sig=XyUXMfRTiPU2nsNXkAFwsmPVCTY this book], you can do it in "about 19 seconds" using Mathematica, although I haven't tried.