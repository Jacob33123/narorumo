#summary It turns out you can compute them pretty quickly!
#labels Featured,Fibonacci,SICP,bignum,algorithms,Scheme

=Really big Fibonacci numbers=
(an article by [Lindsey])

_SICP_ [http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.19 Exercise 1.19] gives most of a procedure for computing [http://en.wikipedia.org/wiki/Fibonacci_number Fibonacci numbers] that runs in a logarithmic number of steps.  The exercise is to complete the procedure by replacing the `<??>`s in the code below with the appropriate expressions.

{{{
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   <??>      ; compute p'
                   <??>      ; compute q'
                   (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))
}}}

After I [http://code.google.com/p/narorumo/source/diff?r=81&format=side&path=/trunk/sicp/chapter1.scm did the exercise], it seemed to be working pretty snappily on the smaller numbers I tested it with, so I tried `(fib 1000000)`.  The resulting number, which takes about eight seconds to calculate on my 2.4 GHz !MacBook Pro, turns out to have 208,988 digits in base 10.  To make sure I had it right, I googled [http://www.google.com/search?q=%22millionth+fibonacci+number%22 "millionth fibonacci number"].^1^  [http://www.upl.cs.wisc.edu/~bethenco/fibo/ This person's result]^2^ turned out to be the same as mine, according to `diff`.

Next I tried [http://www.google.com/search?q=%22ten+millionth+fibonacci+number%22 "ten millionth fibonacci number"]^3^ and found [http://www.bigzaphod.org/fibonacci/ this person's work].^4^  The author wrote, "This sucker took around 31 hours of computation on a 1.67Ghz G4 !PowerBook."  On my machine, `(fib 10000000)` takes eight and a half minutes or so to run.^5^  There are 2,089,877 digits in base 10, and again, `diff` says we got the same answer.

How about the hundred millionth?  Well, it's running now, and I'll let you know if it ever decides to stop.

Should you want to try it at home, I've got the code and some test cases, along with an explanation of how I found _p'_ and _q'_, in a [http://code.google.com/p/narorumo/source/browse/trunk/sicp/1.19.scm separate file] you can grab.  It's about 20 lines of vanilla R5RS Scheme, plus a lot of comments.  

== Acknowledgments ==

It took about two hours to do this exercise.  [http://code.google.com/u/alex.rudnick/ Alex] patiently let me [http://c2.com/cgi/wiki?RubberDucking rubber-duck] him through the first part of the problem, then suggested that I start using "_p'_" and "_q'_" so that I'd be able to tell "old" and "new" _p_ and _q_ apart in my equations, which saved me from scope-related insanity.  Once I had solved for _p'_ and _q'_, it took only a couple of minutes to write the code.

[http://xkcd.com/289/ http://imgs.xkcd.com/comics/alone.png]

== Notes ==

^1^ At the time of this writing on May 12, 2008, this query returned 26 results.

^2^ It was also [http://digg.com/odd_stuff/The_millionth_fibonacci_number/ mentioned on Digg] with the comment "This must have taken a while to calculate."

^3^ This one returned 13 results.  I thought they might keep decreasing by half, but neither [http://www.google.com/search?q=%22hundred+millionth+fibonacci+number%22 "hundred millionth fibonacci number"] nor [http://www.google.com/search?q=%22100%2C000%2C000th+fibonacci+number%22 "100,000,000th fibonacci number"] returned anything.  (How long until _this_ page gets indexed?)

^4^ This one [http://digg.com/programming/Ten_Millionth_Fibonacci_Number made Digg] as well.  Apparently, `(fib 1000000)` counts as "odd stuff" while `(fib 10000000)` counts as "programming".




^4^ According to [http://books.google.com/books?id=yJIghWULQV8C&pg=PA155&lpg=PA155&dq=%2210,000,000th+fibonacci+number%22&ots=GIMiKnKkc7&sig=XyUXMfRTiPU2nsNXkAFwsmPVCTY this book], you can do it in "about 19 seconds" using Mathematica.  `*`whistle`*`   